type: edu
custom_name: Game time!
files:
- name: src/bullscows/Main.java
  visible: true
  text: |-
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("The secret code is prepared: ****.");
            System.out.println("\nTurn 1. Answer:");
            System.out.println("1234");
            System.out.println("Grade: None.");
            System.out.println("\nTurn 2. Answer:");
            System.out.println("9876");
            System.out.println("Grade: 4 bulls.");
            System.out.println("Congrats! The secret code is 9876.");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BullsCowsTest extends StageTest<String> {

        // base test with 1 digit number
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output;
            int gotAnswer = 0;
            output = main.execute("1");

            for (int i = 0; i <= 9; i++) {
                if (main.isFinished()) {
                    break; // if game has stopped, stop cycle and start check the results;
                }
                output = main.execute(Integer.toString(i));
                int[] result = getNumOfBullsAndCows(output);
                if (result[0] == 1) {
                    gotAnswer++; // if got a bull, count for an amount of answers
                }
            }

            // if we got less or more than 1 answer, the program work is incorrect
            if (gotAnswer != 1) {
                return CheckResult.wrong("The game has no answer or more than one.");
            }

            return CheckResult.correct();
        }

        // standard bulls and cows game
        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4");

            Integer[] usedNums = getUsedNumbers(main, 4);
            boolean check = getPermutations(main, 4, usedNums);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program tried all possible " +
                        "combinations of digits and hasn't found the answer.");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // max length we can check
        @DynamicTestingMethod
        CheckResult test3() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6");

            Integer[] usedNums = getUsedNumbers(main, 6);
            boolean check = getPermutations(main, 6, usedNums);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program tried all possible " +
                        "combinations of digits and hasn't found the answer.");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // length limit check
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11");

            if (output.toLowerCase().contains("error")) {
                return CheckResult.correct();
            } else {
                return CheckResult.wrong("An error message expected with input \"11\"");
            }
        }


        Integer[] getUsedNumbers(TestedProgram main, int length) {
            Integer[] nums = new Integer[length];
            int[] result;

            int index = 0;
            String output;
            String input;

            for (int i = 0; i < 10; i++) {
                input = new String(new char[length]).replace("\0", Integer.toString(i));
                output = main.execute(input);
                result = getNumOfBullsAndCows(output);

                if (result[0] > 1) {
                    throw new WrongAnswer("Seems like " +
                            "the calculation of bulls isn't right. " +
                            "For the guess \"" + input + "\" there can be 1 bull at max.");
                }

                if (result[0] == 1) {
                    nums[index++] = i;
                }

                if (index == length) {
                    break;
                }
            }

            if (index != length) {
                throw new WrongAnswer(
                    "Output should contain " + length + " bulls " +
                            "summarized as every option was tried. Found: " + index
                );
            }

            return nums;
        }


        // permutations one by one
        public boolean getPermutations(TestedProgram main, int length, Integer[] elements) {
            int[] indexes = new int[length];
            for (int i = 0; i < length; i++) {
                indexes[i] = 0;
            }

            String output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
            int[] result = getNumOfBullsAndCows(output);
            if (result[0] == length) {
                return true;
            }

            int i = 0;
            while (i < length) {
                if (indexes[i] < i) {
                    swap(elements, i % 2 == 0 ? 0 : indexes[i], i);
                    output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
                    result = getNumOfBullsAndCows(output);
                    if (result[0] == length) {
                        return true;
                    }
                    indexes[i]++;
                    i = 0;
                } else {
                    indexes[i] = 0;
                    i++;
                }
            }
            return false;
        }

        private static void swap(Integer[] input, int a, int b) {
            int tmp = input[a];
            input[a] = input[b];
            input[b] = tmp;
        }


        // get number of bulls and cows from user program's output
        int[] getNumOfBullsAndCows(String userString) {
            Matcher nonePattern = Pattern.compile("\\b[nN]one\\b").matcher(userString);
            Matcher cowsPattern = Pattern.compile("\\b\\d [cC]ows?").matcher(userString);
            Matcher bullsPattern = Pattern.compile("\\b\\d [bB]ulls?").matcher(userString);
            Pattern oneNumPattern = Pattern.compile("\\d");

            if (nonePattern.find()) {
                return new int[]{0, 0};
            }

            int[] ans = {0, 0};
            boolean found = false;

            if (bullsPattern.find()) {
                String temp = bullsPattern.group();
                Matcher oneNumBulls = oneNumPattern.matcher(temp);
                oneNumBulls.find();
                ans[0] = Integer.parseInt(oneNumBulls.group());
                found = true;
            }

            if (cowsPattern.find()) {
                String temp = cowsPattern.group();
                Matcher oneNumCows = oneNumPattern.matcher(temp);
                oneNumCows.find();
                ans[1] = Integer.parseInt(oneNumCows.group());
                found = true;
            }

            if (!found) {
                throw new WrongAnswer(
                    "Cannot find number of bulls or number of cows or None after the input."
                );
            }

            return ans;
        }
    }
  learner_created: false
- name: src/bullscows/BullsAndCows.java
  visible: true
  text: "package bullscows;\n\nimport java.util.Scanner;\n\npublic class BullsAndCows\
    \ {\n\n    private final String secretCode;\n    Random randomlaunch = new Random();\n\
    \n    public BullsAndCows() {\n        secretCode = generateRandomSecret();\n\
    \    }\n\n    public void launch() {\n        \n        randomlaunch.launchRandom();\n\
    \        \n        String userGuess = guess();\n        grade(userGuess);\n  \
    \  }\n\n\n    private String generateRandomSecret() {\n        return \"6923\"\
    ;\n    }\n\n    private String guess() {\n        Scanner scanner = new Scanner(System.in);\n\
    \n        String guess;\n        while (!isValidGuess(guess = scanner.next(),\
    \ randomlaunch.getLengthFromUser())) {\n            System.out.println(\"Your\
    \ guess should be a \" + randomlaunch.getLengthFromUser() + \"-digit\");\n   \
    \     }\n        return guess;\n    }\n\n    private boolean isValidGuess(String\
    \ userGuess, int length) {\n        return userGuess.length() == length;\n   \
    \ }\n\n    private void grade(String userGuess) {\n        int numberOfBulls =\
    \ 0;\n        int numberOfCows = 0;\n\n        for (int i = 0; i < 4; i++) {\n\
    \            if (secretCode.charAt(i) == userGuess.charAt(i)) {\n            \
    \    numberOfBulls++;\n            }\n            for (int j = 0; j < 4; j++)\
    \ {\n                if (userGuess.charAt(j) == secretCode.charAt(i) && i != j)\
    \ {\n                    numberOfCows++;\n                }\n            }\n \
    \       }\n        printGrade(numberOfBulls, numberOfCows);\n    }\n\n    private\
    \ void printGrade(int numberOfBulls, int numberOfCows) {\n        if (numberOfBulls\
    \ == 0 && numberOfCows == 0) {\n            System.out.println(\"Grade: None.\
    \ The secret code is \" + secretCode + \".\");\n        } else if (numberOfBulls\
    \ > 0 && numberOfCows == 0) {\n            System.out.println(\"Grade: \" + numberOfBulls\
    \ + \" bull(s). The secret code is \" + secretCode + \".\");\n        } else if\
    \ (numberOfBulls == 0 && numberOfCows > 0) {\n            System.out.println(\"\
    Grade: \" + numberOfCows + \" cow(s). The secret code is \" + secretCode + \"\
    .\");\n        } else {\n            System.out.println(\"Grade: \" + numberOfBulls\
    \ + \" bull(s) and \" + numberOfCows + \" cow(s). The secret code is \" + secretCode\
    \ + \".\");\n        }\n    }\n}"
  learner_created: true
- name: src/bullscows/Random.java
  visible: true
  text: "package bullscows;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.Scanner;\n\npublic class Random{\n\n\
    \    public int getLengthFromUser() {\n        Scanner scanner = new Scanner(System.in);\n\
    \        System.out.println(\"Please, enter the secret code's length:\");\n  \
    \      int length = scanner.nextInt();\n        if (length < 10) {\n         \
    \   return length;\n        } else {\n            return 0;\n        }\n    }\n\
    \n    public static String randomGenerator(int length) {\n        List<Integer>\
    \ randomList = new ArrayList<>(List.of(0, 2, 3, 4, 5, 6, 7, 8, 9));\n        Collections.shuffle(randomList);\n\
    \        StringBuilder result = new StringBuilder();\n        for (var ch : randomList.subList(0,\
    \ length)) {\n            result.append(ch);\n        }\n        return result.toString();\n\
    \    }\n\n    public void launchRandom() {\n        int length = getLengthFromUser();\n\
    \        if (length != 0) {\n            System.out.println(\"Okay let's start\
    \ a game!\");\n        } else {\n            System.out.println(\"Error: can't\
    \ generate a secret number with a length of \" + length + \" because there aren't\
    \ enough unique digits.\");\n        }\n    }\n    \n    \n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/53/stages/290/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/53/stages/290/implement">JetBrains
    Academy</a>
  time: Tue, 16 Feb 2021 19:32:13 UTC
record: 4
